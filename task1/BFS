import java.util.*;

public class BFS {
    static class Graph {
        private int vertices; // Number of vertices
        private LinkedList<Integer>[] adjacencyList; // Adjacency list

        // Constructor
        public Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new LinkedList[vertices];
            for (int i = 0; i < vertices; i++) {
                adjacencyList[i] = new LinkedList<>();
            }
        }

        // Method to add an edge to the graph
        public void addEdge(int source, int destination) {
            adjacencyList[source].add(destination);
            // For an undirected graph, uncomment the line below
            // adjacencyList[destination].add(source);
        }

        // BFS method
        public void BFS(int startVertex) {
            boolean[] visited = new boolean[vertices]; // Track visited vertices
            Queue<Integer> queue = new LinkedList<>(); // Queue for BFS

            // Start from the given vertex
            visited[startVertex] = true;
            queue.add(startVertex);

            while (!queue.isEmpty()) {
                // Dequeue a vertex and print it
                int currentVertex = queue.poll();
                System.out.print(currentVertex + " ");

                // Get all adjacent vertices of the dequeued vertex
                for (int adjacentVertex : adjacencyList[currentVertex]) {
                    if (!visited[adjacentVertex]) {
                        visited[adjacentVertex] = true;
                        queue.add(adjacentVertex);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6); // Create a graph with 6 vertices
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        System.out.println("Breadth-First Search starting from vertex 0:");
        graph.BFS(0);
    }
}
